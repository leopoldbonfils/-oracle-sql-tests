-- Create Tables (DDL)

CREATE TABLE Hotels (
    Hotel_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,   -- Unique identifier for each hotel
    Hotel_Name VARCHAR2(100) NOT NULL,                             -- Name of the hotel
    Location VARCHAR2(100) NOT NULL,                               -- Location of the hotel
    Rating NUMBER CHECK (Rating >= 1 AND Rating <= 5),             -- Rating of the hotel (1 to 5 stars)
    Created_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP                 -- Timestamp when the hotel record was created
);
 
CREATE TABLE Customers (
    Customer_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique identifier for each customer
    First_Name VARCHAR2(50) NOT NULL,                                -- Customer's first name
    Last_Name VARCHAR2(50) NOT NULL,                                 -- Customer's last name
    Email VARCHAR2(100) UNIQUE NOT NULL,                             -- Customer's email (must be unique)
    Phone_Number VARCHAR2(15),                                       -- Customer's phone number
    Created_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP                   -- Timestamp when the customer was created
);

CREATE TABLE Rooms (
    Room_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,   -- Unique identifier for each room
    Hotel_ID NUMBER,                                               -- Foreign key referencing the Hotels table
    Room_Number VARCHAR2(10) NOT NULL,                             -- Room number
    Room_Type VARCHAR2(50) CHECK (Room_Type IN ('Single', 'Double', 'Suite')), -- Type of the room
    Price_Per_Night NUMBER NOT NULL,                               -- Price per night for the room
    Availability_Status CHAR(1) DEFAULT 'Y' CHECK (Availability_Status IN ('Y', 'N')), -- Room availability status (Y/N)
    FOREIGN KEY (Hotel_ID) REFERENCES Hotels(Hotel_ID)             -- Linking to the Hotels table
);

CREATE TABLE Bookings (
    Booking_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique identifier for each booking
    Customer_ID NUMBER,                                             -- Foreign key referencing the Customers table
    Room_ID NUMBER,                                                 -- Foreign key referencing the Rooms table
    Check_In_Date DATE NOT NULL,                                    -- Check-in date
    Check_Out_Date DATE NOT NULL,                                   -- Check-out date
    Total_Amount NUMBER NOT NULL,                                   -- Total amount for the booking
    FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID),    -- Linking to the Customers table
    FOREIGN KEY (Room_ID) REFERENCES Rooms(Room_ID)                 -- Linking to the Rooms table
);

CREATE TABLE Payments (
    Payment_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique identifier for each payment
    Booking_ID NUMBER,                                              -- Foreign key referencing the Bookings table
    Payment_Amount NUMBER NOT NULL,                                 -- Amount of the payment
    Payment_Date DATE DEFAULT SYSDATE,                              -- Date of payment
    Payment_Method VARCHAR2(50) CHECK (Payment_Method IN ('Credit Card', 'Debit Card', 'Cash')), -- Payment method
    FOREIGN KEY (Booking_ID) REFERENCES Bookings(Booking_ID)        -- Linking to the Bookings table
);

-- Insert Data (DML)

-- Inserting data into Hotels table
INSERT INTO Hotels (Hotel_Name, Location, Rating)
VALUES ('Grand Palace ', 'KIGALI', 5);

INSERT INTO Hotels (Hotel_Name, Location, Rating)
VALUES ('Marriott', 'KIGALI', 4);

INSERT INTO Hotels (Hotel_Name, Location, Rating)
VALUES ('Raddison', 'KIGALI', 3);

-- Inserting data into Customers table
INSERT INTO Customers (First_Name, Last_Name, Email, Phone_Number)
VALUES ('Bonfils', 'LEOPOLD', 'leopoldbonfils@gmail.com', '0783475834');

INSERT INTO Customers (First_Name, Last_Name, Email, Phone_Number)
VALUES ('MUGISHA', 'Eric', 'mugishaeric@gmail.com', '0784738924');

INSERT INTO Customers (First_Name, Last_Name, Email, Phone_Number)
VALUES ('Lucky', 'Brown', 'luckbrown@gmail.com', '0785758392');

-- Inserting data into Rooms table
INSERT INTO Rooms (Hotel_ID, Room_Number, Room_Type, Price_Per_Night, Availability_Status)
VALUES (1, '101', 'Single', 100, 'Y');

INSERT INTO Rooms (Hotel_ID, Room_Number, Room_Type, Price_Per_Night, Availability_Status)
VALUES (1, '102', 'Double', 150, 'Y');

INSERT INTO Rooms (Hotel_ID, Room_Number, Room_Type, Price_Per_Night, Availability_Status)
VALUES (2, '201', 'Suite', 300, 'Y');

-- Inserting data into Bookings table
INSERT INTO Bookings (Customer_ID, Room_ID, Check_In_Date, Check_Out_Date, Total_Amount)
VALUES (1, 1, TO_DATE('2024-10-05', 'YYYY-MM-DD'), TO_DATE('2024-10-10', 'YYYY-MM-DD'), 500);

INSERT INTO Bookings (Customer_ID, Room_ID, Check_In_Date, Check_Out_Date, Total_Amount)
VALUES (2, 2, TO_DATE('2024-11-01', 'YYYY-MM-DD'), TO_DATE('2024-11-05', 'YYYY-MM-DD'), 600);

INSERT INTO Bookings (Customer_ID, Room_ID, Check_In_Date, Check_Out_Date, Total_Amount)
VALUES (3, 3, TO_DATE('2024-12-15', 'YYYY-MM-DD'), TO_DATE('2024-12-20', 'YYYY-MM-DD'), 1500);

-- Inserting data into Payments table
INSERT INTO Payments (Booking_ID, Payment_Amount, Payment_Date, Payment_Method)
VALUES (1, 500, TO_DATE('2024-10-03', 'YYYY-MM-DD'), 'Credit Card');

INSERT INTO Payments (Booking_ID, Payment_Amount, Payment_Date, Payment_Method)
VALUES (2, 600, TO_DATE('2024-10-03', 'YYYY-MM-DD'), 'Debit Card');

INSERT INTO Payments (Booking_ID, Payment_Amount, Payment_Date, Payment_Method)git 
VALUES (3, 1500, TO_DATE('2024-10-03', 'YYYY-MM-DD'), 'Cash');

--Select with Join (DQL)
 
SELECT * FROM Hotels;
SELECT * FROM Customers;
SELECT 
    B.Booking_ID, 
    C.First_Name, 
    C.Last_Name, 
    R.Room_Number, 
    H.Hotel_Name, 
    B.Check_In_Date, 
    B.Check_Out_Date, 
    B.Total_Amount
FROM Bookings B
JOIN Customers C ON B.Customer_ID = C.Customer_ID
JOIN Rooms R ON B.Room_ID = R.Room_ID
JOIN Hotels H ON R.Hotel_ID = H.Hotel_ID;

SELECT 
    Room_ID, 
    Room_Number, 
    Room_Type, 
    Price_Per_Night 
FROM Rooms 
WHERE Availability_Status = 'Y';

-- Delete Data (DML)

DELETE FROM Bookings 
WHERE Booking_ID = 1;  -- Deletes the booking with Booking_ID = 1

DELETE FROM Bookings 
WHERE Booking_ID = 1;  -- Deletes the booking with Booking_ID = 1

DELETE FROM Customers 
WHERE Customer_ID = 2;  -- Deletes the customer with Customer_ID = 2

DELETE FROM Bookings B
WHERE B.Room_ID IN (SELECT Room_ID FROM Rooms WHERE Hotel_ID = 1);  -- Deletes all bookings in Hotel with Hotel_ID = 1

DELETE FROM Bookings B
WHERE B.Room_ID IN (SELECT Room_ID FROM Rooms WHERE Hotel_ID = 1);  -- Deletes all bookings in Hotel with Hotel_ID = 1

-- Update Data (DML)

UPDATE Rooms
SET Availability_Status = 'N'  -- Set room as unavailable
WHERE Room_ID = 1;  -- Assuming Room_ID 1 was just booked

UPDATE Customers
SET Email = 'ericmaniraduha@gmail.com'
WHERE Customer_ID = 1;  -- Updates the email for Customer_ID = 1

UPDATE Rooms
SET Price_Per_Night = Price_Per_Night * 1.10  -- Increases room price by 10%
WHERE Hotel_ID = 1;  -- For all rooms in Hotel with Hotel_ID = 1

-- Select with Join (DQL)

SELECT 
    C.First_Name, 
    C.Last_Name, 
    B.Check_In_Date, 
    B.Check_Out_Date, 
    B.Total_Amount 
FROM Customers C
JOIN Bookings B ON C.Customer_ID = B.Customer_ID;
SELECT 
    R.Room_Number, 
    R.Room_Type, 
    H.Hotel_Name, 
    B.Check_In_Date, 
    B.Check_Out_Date 
FROM Rooms R
JOIN Hotels H ON R.Hotel_ID = H.Hotel_ID
JOIN Bookings B ON R.Room_ID = B.Room_ID;

SELECT 
    P.Payment_ID, 
    B.Booking_ID, 
    P.Payment_Amount, 
    P.Payment_Date, 
    P.Payment_Method 
FROM Payments P
JOIN Bookings B ON P.Booking_ID = B.Booking_ID;
SELECT 
    B.Booking_ID, 
    C.First_Name, 
    C.Last_Name, 
    H.Hotel_Name, 
    R.Room_Number, 
    B.Check_In_Date, 
    B.Check_Out_Date, 
    B.Total_Amount, 
    P.Payment_Amount, 
    P.Payment_Date, 
    P.Payment_Method 
FROM Bookings B
JOIN Customers C ON B.Customer_ID = C.Customer_ID
JOIN Rooms R ON B.Room_ID = R.Room_ID
JOIN Hotels H ON R.Hotel_ID = H.Hotel_ID
JOIN Payments P ON B.Booking_ID = P.Booking_ID;

-- Subquery (DQL)

SELECT First_Name, Last_Name 
FROM Customers 
WHERE Customer_ID IN (
    SELECT B.Customer_ID 
    FROM Bookings B
    JOIN Rooms R ON B.Room_ID = R.Room_ID
    WHERE R.Hotel_ID = 1
);

SELECT SUM(B.Total_Amount) AS Total_Revenue 
FROM Bookings B 
JOIN Rooms R ON B.Room_ID = R.Room_ID
WHERE R.Hotel_ID = 1;







